#name:Data_state
#prev:
Consume the next input character:
#trans:
#char:U+0026 AMPERSAND (&amp;)
Set the return state to the Data_state. Switch to the Character_reference_state.
#char:U+003C LESS-THAN SIGN (&lt;)
Switch to the Tag_open_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Emit the current input character as a character token.
#char:EOF
Emit an end-of-file token.
#char:Anything else
Emit the current input character as a character token.
#
#name:RCDATA_state
#prev:
Consume the next input character:
#trans:
#char:U+0026 AMPERSAND (&amp;)
Set the return state to the RCDATA_state. Switch to the Character_reference_state.
#char:U+003C LESS-THAN SIGN (&lt;)
Switch to the RCDATA_less_than_sign_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
#char:EOF
Emit an end-of-file token.
#char:Anything else
Emit the current input character as a character token.
#
#name:RAWTEXT_state
#prev:
Consume the next input character:
#trans:
#char:U+003C LESS-THAN SIGN (&lt;)
Switch to the RAWTEXT_less_than_sign_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
#char:EOF
Emit an end-of-file token.
#char:Anything else
Emit the current input character as a character token.
#
#name:Script_data_state
#prev:
Consume the next input character:
#trans:
#char:U+003C LESS-THAN SIGN (&lt;)
Switch to the Script_data_less_than_sign_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
#char:EOF
Emit an end-of-file token.
#char:Anything else
Emit the current input character as a character token.
#
#name:PLAINTEXT_state
#prev:
Consume the next input character:
#trans:
#char:U+0000 NULL
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
#char:EOF
Emit an end-of-file token.
#char:Anything else
Emit the current input character as a character token.
#
#name:Tag_open_state
#prev:
Consume the next input character:
#trans:
#char:U+0021 EXCLAMATION MARK (!)
Switch to the Markup_declaration_open_state.
#char:U+002F SOLIDUS (/)
Switch to the End_tag_open_state.
#char:ASCII alpha
Create a new start tag token and set its tag name to the empty string. Reconsume in the Tag_name_state. 
#char:U+003F QUESTION MARK (?)
This is an unexpected-question-mark-instead-of-tag-name parse error. Create a comment token whose data is the empty string. Reconsume in the Bogus_comment_state.
#char:EOF
This is an eof-before-tag-name parse error. Emit a U+003C LESS-THAN SIGN character token and an end-of-file token.
#char:Anything else
This is an invalid-first-character-of-tag-name parse error. Emit a U+003C LESS-THAN SIGN character token. Reconsume in the Data_state.
#
#name:End_tag_open_state
#prev:
Consume the next input character:
#trans:
#char:ASCII alpha
Create a new end tag token, set its tag name to the empty string. Reconsume in the Tag_name_state. 
#char:U+003E GREATER-THAN SIGN (&gt;)
This is a missing-end-tag-name parse error. Switch to the Data_state.
#char:EOF
This is an eof-before-tag-name parse error. Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token and an end-of-file token. 
#char:Anything else
This is an invalid-first-character-of-tag-name parse error. Create a comment token whose data is the empty string. Reconsume in the Bogus_comment_state.
#
#name:Tag_name_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Switch to the Before_attribute_name_state.
#char:U+000A LINE FEED (LF)
Switch to the Before_attribute_name_state.
#char:U+000C FORM FEED (FF)
Switch to the Before_attribute_name_state.
#char:U+0020 SPACE
Switch to the Before_attribute_name_state.
#char:U+002F SOLIDUS (/)
Switch to the Self_closing_start_tag_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Data_state. Emit the current tag token.
#char:ASCII upper alpha
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current tag token's tag name.
#char:EOF
This is an eof-in-tag parse error. Emit an end-of-file token.
#char:Anything else
Append the current input character to the current tag token's tag name.
#
#name:RCDATA_less_than_sign_state
#prev:
Consume the next input character:
#trans:
#char:U+002F SOLIDUS (/)
Set the temporary buffer to the empty string. Switch to the RCDATA_end_tag_open_state.
#char:Anything else
Emit a U+003C LESS-THAN SIGN character token. Reconsume in the RCDATA_state.
#
#name:RCDATA_end_tag_open_state
#prev:
Consume the next input character:
#trans:
#char:ASCII alpha
Create a new end tag token, set its tag name to the empty string. Reconsume in the RCDATA_end_tag_name_state. 
#char:Anything else
Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the RCDATA_state.
#
#name:RCDATA_end_tag_name_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+000A LINE FEED (LF)
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+000C FORM FEED (FF)
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+0020 SPACE
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+002F SOLIDUS (/)
If the current end tag token is an appropriate end tag token, then switch to the Self_closing_start_tag_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+003E GREATER-THAN SIGN (&gt;)
If the current end tag token is an appropriate end tag token, then switch to the Data_state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
#char:ASCII upper alpha
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.
#char:ASCII lower alpha
Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.
#char:Anything else
Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the RCDATA_state.
#
#name:RAWTEXT_less_than_sign_state
#prev:
Consume the next input character:
#trans:
#char:U+002F SOLIDUS (/)
Set the temporary buffer to the empty string. Switch to the RAWTEXT_end_tag_open_state.
#char:Anything else
Emit a U+003C LESS-THAN SIGN character token. Reconsume in the RAWTEXT_state.
#
#name:RAWTEXT_end_tag_open_state
#prev:
Consume the next input character:
#trans:
#char:ASCII alpha
Create a new end tag token, set its tag name to the empty string. Reconsume in the RAWTEXT_end_tag_name_state. 
#char:Anything else
Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the RAWTEXT_state.
#
#name:RAWTEXT_end_tag_name_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+000A LINE FEED (LF)
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+000C FORM FEED (FF)
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+0020 SPACE
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+002F SOLIDUS (/)
If the current end tag token is an appropriate end tag token, then switch to the Self_closing_start_tag_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+003E GREATER-THAN SIGN (&gt;)
If the current end tag token is an appropriate end tag token, then switch to the Data_state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
#char:ASCII upper alpha
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.
#char:ASCII lower alpha
Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.
#char:Anything else
Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the RAWTEXT_state.
#
#name:Script_data_less_than_sign_state
#prev:
Consume the next input character:
#trans:
#char:U+002F SOLIDUS (/)
Set the temporary buffer to the empty string. Switch to the Script_data_end_tag_open_state.
#char:U+0021 EXCLAMATION MARK (!)
Switch to the Script_data_escape_start_state. Emit a U+003C LESS-THAN SIGN character token and a U+0021 EXCLAMATION MARK character token.
#char:Anything else
Emit a U+003C LESS-THAN SIGN character token. Reconsume in the Script_data_state.
#
#name:Script_data_end_tag_open_state
#prev:
Consume the next input character:
#trans:
#char:ASCII alpha
Create a new end tag token, set its tag name to the empty string. Reconsume in the Script_data_end_tag_name_state. 
#char:Anything else
Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the Script_data_state.
#
#name:Script_data_end_tag_name_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+000A LINE FEED (LF)
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+000C FORM FEED (FF)
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+0020 SPACE
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+002F SOLIDUS (/)
If the current end tag token is an appropriate end tag token, then switch to the Self_closing_start_tag_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+003E GREATER-THAN SIGN (&gt;)
If the current end tag token is an appropriate end tag token, then switch to the Data_state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
#char:ASCII upper alpha
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.
#char:ASCII lower alpha
Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.
#char:Anything else
Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer (in the order they were added to the buffer). Reconsume in the Script_data_state.
#
#name:Script_data_escape_start_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Switch to the Script_data_escape_start_dash_state. Emit a U+002D HYPHEN-MINUS character token.
#char:Anything else
Reconsume in the Script_data_state.
#
#name:Script_data_escape_start_dash_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Switch to the Script_data_escaped_dash_dash_state. Emit a U+002D HYPHEN-MINUS character token.
#char:Anything else
Reconsume in the Script_data_state.
#
#name:Script_data_escaped_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Switch to the Script_data_escaped_dash_state. Emit a U+002D HYPHEN-MINUS character token.
#char:U+003C LESS-THAN SIGN (&lt;)
Switch to the Script_data_escaped_less_than_sign_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
#char:EOF
This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.
#char:Anything else
Emit the current input character as a character token.
#
#name:Script_data_escaped_dash_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Switch to the Script_data_escaped_dash_dash_state. Emit a U+002D HYPHEN-MINUS character token.
#char:U+003C LESS-THAN SIGN (&lt;)
Switch to the Script_data_escaped_less_than_sign_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Switch to the Script_data_escaped_state. Emit a U+FFFD REPLACEMENT CHARACTER character token.
#char:EOF
This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.
#char:Anything else
Switch to the Script_data_escaped_state. Emit the current input character as a character token.
#
#name:Script_data_escaped_dash_dash_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Emit a U+002D HYPHEN-MINUS character token.
#char:U+003C LESS-THAN SIGN (&lt;)
Switch to the Script_data_escaped_less_than_sign_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Script_data_state. Emit a U+003E GREATER-THAN SIGN character token.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Switch to the Script_data_escaped_state. Emit a U+FFFD REPLACEMENT CHARACTER character token.
#char:EOF
This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.
#char:Anything else
Switch to the Script_data_escaped_state. Emit the current input character as a character token.
#
#name:Script_data_escaped_less_than_sign_state
#prev:
Consume the next input character:
#trans:
#char:U+002F SOLIDUS (/)
Set the temporary buffer to the empty string. Switch to the Script_data_escaped_end_tag_open_state.
#char:ASCII alpha
Set the temporary buffer to the empty string. Emit a U+003C LESS-THAN SIGN character token. Reconsume in the Script_data_double_escape_start_state.
#char:Anything else
Emit a U+003C LESS-THAN SIGN character token. Reconsume in the Script_data_escaped_state.
#
#name:Script_data_escaped_end_tag_open_state
#prev:
Consume the next input character:
#trans:
#char:ASCII alpha
Create a new end tag token, set its tag name to the empty string. Reconsume in the Script_data_escaped_end_tag_name_state.
#char:Anything else
Emit a U+003C LESS-THAN SIGN character token and a U+002F SOLIDUS character token. Reconsume in the Script_data_escaped_state.
#
#name:Script_data_escaped_end_tag_name_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+000A LINE FEED (LF)
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+000C FORM FEED (FF)
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+0020 SPACE
If the current end tag token is an appropriate end tag token, then switch to the Before_attribute_name_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+002F SOLIDUS (/)
If the current end tag token is an appropriate end tag token, then switch to the Self_closing_start_tag_state. Otherwise, treat it as per the "anything else" entry below.
#char:U+003E GREATER-THAN SIGN (&gt;)
If the current end tag token is an appropriate end tag token, then switch to the Data_state and emit the current tag token. Otherwise, treat it as per the "anything else" entry below.
#char:ASCII upper alpha
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current tag token's tag name. Append the current input character to the temporary buffer.
#char:ASCII lower alpha
Append the current input character to the current tag token's tag name. Append the current input character to the temporary buffer.
#char:Anything else
Emit a U+003C LESS-THAN SIGN character token, a U+002F SOLIDUS character token, and a character token for each of the characters in the temporary buffer  (in the order they were added to the buffer). Reconsume in the Script_data_escaped_state.
#
#name:Script_data_double_escape_start_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
If the temporary buffer is the string "script", then switch to the Script_data_double_escaped_state. Otherwise, switch to the Script_data_escaped_state. Emit the current input character as a character token.
#char:U+000A LINE FEED (LF)
If the temporary buffer is the string "script", then switch to the Script_data_double_escaped_state. Otherwise, switch to the Script_data_escaped_state. Emit the current input character as a character token.
#char:U+000C FORM FEED (FF)
If the temporary buffer is the string "script", then switch to the Script_data_double_escaped_state. Otherwise, switch to the Script_data_escaped_state. Emit the current input character as a character token.
#char:U+0020 SPACE
If the temporary buffer is the string "script", then switch to the Script_data_double_escaped_state. Otherwise, switch to the Script_data_escaped_state. Emit the current input character as a character token.
#char:U+002F SOLIDUS (/)
If the temporary buffer is the string "script", then switch to the Script_data_double_escaped_state. Otherwise, switch to the Script_data_escaped_state. Emit the current input character as a character token.
#char:U+003E GREATER-THAN SIGN (&gt;)
If the temporary buffer is the string "script", then switch to the Script_data_double_escaped_state. Otherwise, switch to the Script_data_escaped_state. Emit the current input character as a character token.
#char:ASCII upper alpha
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the temporary buffer. Emit the current input character as a character token.
#char:ASCII lower alpha
Append the current input character to the temporary buffer. Emit the current input character as a character token.
#char:Anything else
Reconsume in the Script_data_escaped_state.
#
#name:Script_data_double_escaped_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Switch to the Script_data_double_escaped_dash_state. Emit a U+002D HYPHEN-MINUS character token.
#char:U+003C LESS-THAN SIGN (&lt;)
Switch to the Script_data_double_escaped_less_than_sign_state. Emit a U+003C LESS-THAN SIGN character token.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Emit a U+FFFD REPLACEMENT CHARACTER character token.
#char:EOF
This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.
#char:Anything else
Emit the current input character as a character token.
#
#name:Script_data_double_escaped_dash_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Switch to the Script_data_double_escaped_dash_dash_state. Emit a U+002D HYPHEN-MINUS character token.
#char:U+003C LESS-THAN SIGN (&lt;)
Switch to the Script_data_double_escaped_less_than_sign_state. Emit a U+003C LESS-THAN SIGN character token.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Switch to the Script_data_double_escaped_state. Emit a U+FFFD REPLACEMENT CHARACTER character token.
#char:EOF
This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.
#char:Anything else
Switch to the Script_data_double_escaped_state. Emit the current input character as a character token.
#
#name:Script_data_double_escaped_dash_dash_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Emit a U+002D HYPHEN-MINUS character token.
#char:U+003C LESS-THAN SIGN (&lt;)
Switch to the Script_data_double_escaped_less_than_sign_state. Emit a U+003C LESS-THAN SIGN character token.
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Script_data_state. Emit a U+003E GREATER-THAN SIGN character token.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Switch to the Script_data_double_escaped_state. Emit a U+FFFD REPLACEMENT CHARACTER character token.
#char:EOF
This is an eof-in-script-html-comment-like-text parse error. Emit an end-of-file token.
#char:Anything else
Switch to the Script_data_double_escaped_state. Emit the current input character as a character token.
#
#name:Script_data_double_escaped_less_than_sign_state
#prev:
Consume the next input character:
#trans:
#char:U+002F SOLIDUS (/)
Set the temporary buffer to the empty string. Switch to the Script_data_double_escape_end_state. Emit a U+002F SOLIDUS character token.
#char:Anything else
Reconsume in the Script_data_double_escaped_state.
#
#name:Script_data_double_escape_end_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
If the temporary buffer is the string "script", then switch to the Script_data_escaped_state. Otherwise, switch to the Script_data_double_escaped_state. Emit the current input character as a character token.
#char:U+000A LINE FEED (LF)
If the temporary buffer is the string "script", then switch to the Script_data_escaped_state. Otherwise, switch to the Script_data_double_escaped_state. Emit the current input character as a character token.
#char:U+000C FORM FEED (FF)
If the temporary buffer is the string "script", then switch to the Script_data_escaped_state. Otherwise, switch to the Script_data_double_escaped_state. Emit the current input character as a character token.
#char:U+0020 SPACE
If the temporary buffer is the string "script", then switch to the Script_data_escaped_state. Otherwise, switch to the Script_data_double_escaped_state. Emit the current input character as a character token.
#char:U+002F SOLIDUS (/)
If the temporary buffer is the string "script", then switch to the Script_data_escaped_state. Otherwise, switch to the Script_data_double_escaped_state. Emit the current input character as a character token.
#char:U+003E GREATER-THAN SIGN (&gt;)
If the temporary buffer is the string "script", then switch to the Script_data_escaped_state. Otherwise, switch to the Script_data_double_escaped_state. Emit the current input character as a character token.
#char:ASCII upper alpha
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the temporary buffer. Emit the current input character as a character token.
#char:ASCII lower alpha
Append the current input character to the temporary buffer. Emit the current input character as a character token.
#char:Anything else
Reconsume in the Script_data_double_escaped_state.
#
#name:Before_attribute_name_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Ignore the character.
#char:U+000A LINE FEED (LF)
Ignore the character.
#char:U+000C FORM FEED (FF)
Ignore the character.
#char:U+0020 SPACE
Ignore the character.
#char:U+002F SOLIDUS (/)
Reconsume in the After_attribute_name_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
Reconsume in the After_attribute_name_state.
#char:EOF
Reconsume in the After_attribute_name_state.
#char:U+003D EQUALS SIGN (=)
This is an unexpected-equals-sign-before-attribute-name parse error. Start a new attribute in the current tag token. Set that attribute's name to the current input character, and its value to the empty string. Switch to the Attribute_name_state.
#char:Anything else
Start a new attribute in the current tag token. Set that attribute name and value to the empty string. Reconsume in the Attribute_name_state.
#
#name:Attribute_name_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Reconsume in the After_attribute_name_state.
#char:U+000A LINE FEED (LF)
Reconsume in the After_attribute_name_state.
#char:U+000C FORM FEED (FF)
Reconsume in the After_attribute_name_state.
#char:U+0020 SPACE
Reconsume in the After_attribute_name_state.
#char:U+002F SOLIDUS (/)
Reconsume in the After_attribute_name_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
Reconsume in the After_attribute_name_state.
#char:EOF
Reconsume in the After_attribute_name_state.
#char:U+003D EQUALS SIGN (=)
Switch to the Before_attribute_value_state.
#char:ASCII upper alpha
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current attribute's name.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's name.
#char:U+0022 QUOTATION MARK (")
This is an unexpected-character-in-attribute-name parse error. Treat it as per the "anything else" entry below.
#char:U+0027 APOSTROPHE (')
This is an unexpected-character-in-attribute-name parse error. Treat it as per the "anything else" entry below.
#char:U+003C LESS-THAN SIGN (&lt;)
This is an unexpected-character-in-attribute-name parse error. Treat it as per the "anything else" entry below.
#char:Anything else
Append the current input character to the current attribute's name.
#
#name:After_attribute_name_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Ignore the character.
#char:U+000A LINE FEED (LF)
Ignore the character.
#char:U+000C FORM FEED (FF)
Ignore the character.
#char:U+0020 SPACE
Ignore the character.
#char:U+002F SOLIDUS (/)
Switch to the Self_closing_start_tag_state.
#char:U+003D EQUALS SIGN (=)
Switch to the Before_attribute_value_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Data_state. Emit the current tag token.
#char:EOF
This is an eof-in-tag parse error. Emit an end-of-file token.
#char:Anything else
Start a new attribute in the current tag token. Set that attribute name and value to the empty string. Reconsume in the Attribute_name_state.
#
#name:Before_attribute_value_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Ignore the character.
#char:U+000A LINE FEED (LF)
Ignore the character.
#char:U+000C FORM FEED (FF)
Ignore the character.
#char:U+0020 SPACE
Ignore the character.
#char:U+0022 QUOTATION MARK (")
Switch to the Attribute_value_double_quoted_state.
#char:U+0027 APOSTROPHE (')
Switch to the Attribute_value_single_quoted_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
This is a missing-attribute-value parse error. Switch to the Data_state. Emit the current tag token.
#char:Anything else
Reconsume in the Attribute_value_unquoted_state.
#
#name:Attribute_value_double_quoted_state
#prev:
Consume the next input character:
#trans:
#char:U+0022 QUOTATION MARK (")
Switch to the After_attribute_value_quoted_state.
#char:U+0026 AMPERSAND (&amp;)
Set the return state to the Attribute_value_double_quoted_state. Switch to the Character_reference_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's value.
#char:EOF
This is an eof-in-tag parse error. Emit an end-of-file token.
#char:Anything else
Append the current input character to the current attribute's value.
#
#name:Attribute_value_single_quoted_state
#prev:
Consume the next input character:
#trans:
#char:U+0027 APOSTROPHE (')
Switch to the After_attribute_value_quoted_state.
#char:U+0026 AMPERSAND (&amp;)
Set the return state to the Attribute_value_single_quoted_state. Switch to the Character_reference_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's value.
#char:EOF
This is an eof-in-tag parse error. Emit an end-of-file token.
#char:Anything else
Append the current input character to the current attribute's value.
#
#name:Attribute_value_unquoted_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Switch to the Before_attribute_name_state.
#char:U+000A LINE FEED (LF)
Switch to the Before_attribute_name_state.
#char:U+000C FORM FEED (FF)
Switch to the Before_attribute_name_state.
#char:U+0020 SPACE
Switch to the Before_attribute_name_state.
#char:U+0026 AMPERSAND (&amp;)
Set the return state to the Attribute_value_unquoted_state. Switch to the Character_reference_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Data_state. Emit the current tag token.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current attribute's value.
#char:U+0022 QUOTATION MARK (")
This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.
#char:U+0027 APOSTROPHE (')
This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.
#char:U+003C LESS-THAN SIGN (&lt;)
This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.
#char:U+003D EQUALS SIGN (=)
This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.
#char:U+0060 GRAVE ACCENT (`)
This is an unexpected-character-in-unquoted-attribute-value parse error. Treat it as per the "anything else" entry below.
#char:EOF
This is an eof-in-tag parse error. Emit an end-of-file token.
#char:Anything else
Append the current input character to the current attribute's value.
#
#name:After_attribute_value_quoted_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Switch to the Before_attribute_name_state.
#char:U+000A LINE FEED (LF)
Switch to the Before_attribute_name_state.
#char:U+000C FORM FEED (FF)
Switch to the Before_attribute_name_state.
#char:U+0020 SPACE
Switch to the Before_attribute_name_state.
#char:U+002F SOLIDUS (/)
Switch to the Self_closing_start_tag_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Data_state. Emit the current tag token.
#char:EOF
This is an eof-in-tag parse error. Emit an end-of-file token.
#char:Anything else
This is a missing-whitespace-between-attributes parse error. Reconsume in the Before_attribute_name_state. 
#
#name:Self_closing_start_tag_state
#prev:
Consume the next input character:
#trans:
#char:U+003E GREATER-THAN SIGN (&gt;)
Set the self-closing flag of the current tag token. Switch to the Data_state. Emit the current tag token.
#char:EOF
This is an eof-in-tag parse error. Emit an end-of-file token.
#char:Anything else
This is an unexpected-solidus-in-tag parse error. Reconsume in the Before_attribute_name_state.
#
#name:Bogus_comment_state
#prev:
Consume the next input character:
#trans:
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Data_state. Emit the comment token.
#char:EOF
Emit the comment. Emit an end-of-file token.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the comment token's data.
#char:Anything else
Append the current input character to the comment token's data.
#
#name:Markup_declaration_open_state
#prev:
If the next few characters are: 
#trans:
#char:Two U+002D HYPHEN-MINUS characters (-)
Consume those two characters, create a comment token whose data is the empty string, and switch to the Comment_start_state.
#char:ASCII case-insensitive match for the word "DOCTYPE"
Consume those characters and switch to the DOCTYPE_state.
#char:The string "[CDATA[" (the five uppercase letters "CDATA" with a U+005B LEFT SQUARE BRACKET character before and after)
Consume those characters. If there is an adjusted current node and it is not an element in the HTML namespace, then switch to the CDATA_section_state. Otherwise, this is a cdata-in-html-content parse error. Create a comment token whose data is the "[CDATA[" string. Switch to the Bogus_comment_state.
#char:Anything else
This is an incorrectly-opened-comment parse error. Create a comment token whose data is the empty string. Switch to the Bogus_comment_state (don't consume anything in the current state).
#
#name:Comment_start_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Switch to the Comment_start_dash_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
This is an abrupt-closing-of-empty-comment parse error. Switch to the Data_state. Emit the comment token.
#char:Anything else
Reconsume in the Comment_state.
#
#name:Comment_start_dash_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Switch to the Comment_end_state
#char:U+003E GREATER-THAN SIGN (&gt;)
This is an abrupt-closing-of-empty-comment parse error. Switch to the Data_state. Emit the comment token.
#char:EOF
This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.
#char:Anything else
Append a U+002D HYPHEN-MINUS character (-) to the comment token's data. Reconsume in the Comment_state.
#
#name:Comment_state
#prev:
Consume the next input character:
#trans:
#char:U+003C LESS-THAN SIGN (&lt;)
Append the current input character to the comment token's data. Switch to the Comment_less_than_sign_state.
#char:U+002D HYPHEN-MINUS (-)
Switch to the Comment_end_dash_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the comment token's data.
#char:EOF
This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.
#char:Anything else
Append the current input character to the comment token's data.
#
#name:Comment_less_than_sign_state
#prev:
Consume the next input character:
#trans:
#char:U+0021 EXCLAMATION MARK (!)
Append the current input character to the comment token's data. Switch to the Comment_less_than_sign_bang_state.
#char:U+003C LESS-THAN SIGN (&lt;)
Append the current input character to the comment token's data.
#char:Anything else
Reconsume in the Comment_state.
#
#name:Comment_less_than_sign_bang_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Switch to the Comment_less_than_sign_bang_dash_state.
#char:Anything else
Reconsume in the Comment_state.
#
#name:Comment_less_than_sign_bang_dash_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Switch to the Comment_less_than_sign_bang_dash_dash_state.
#char:Anything else
Reconsume in the Comment_end_dash_state.
#
#name:Comment_less_than_sign_bang_dash_dash_state
#prev:
Consume the next input character:
#trans:
#char:U+003E GREATER-THAN SIGN (&gt;)
Reconsume in the Comment_end_state.
#char:EOF
Reconsume in the Comment_end_state.
#char:Anything else
This is a nested-comment parse error. Reconsume in the Comment_end_state.
#
#name:Comment_end_dash_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Switch to the Comment_end_state
#char:EOF
This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.
#char:Anything else
Append a U+002D HYPHEN-MINUS character (-) to the comment token's data. Reconsume in the Comment_state.
#
#name:Comment_end_state
#prev:
Consume the next input character:
#trans:
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Data_state. Emit the comment token.
#char:U+0021 EXCLAMATION MARK (!)
Switch to the Comment_end_bang_state.
#char:U+002D HYPHEN-MINUS (-)
Append a U+002D HYPHEN-MINUS character (-) to the comment token's data.
#char:EOF
This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.
#char:Anything else
Append two U+002D HYPHEN-MINUS characters (-) to the comment token's data. Reconsume in the Comment_state.
#
#name:Comment_end_bang_state
#prev:
Consume the next input character:
#trans:
#char:U+002D HYPHEN-MINUS (-)
Append two U+002D HYPHEN-MINUS characters (-) and a U+0021 EXCLAMATION MARK character (-EXC-) to the comment token's data. Switch to the Comment_end_dash_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
This is an incorrectly-closed-comment parse error. Switch to the Data_state. Emit the comment token.
#char:EOF
This is an eof-in-comment parse error. Emit the comment token. Emit an end-of-file token.
#char:Anything else
Append two U+002D HYPHEN-MINUS characters (-) and a U+0021 EXCLAMATION MARK character (!) to the comment token's data. Reconsume in the Comment_state.
#
#name:DOCTYPE_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Switch to the Before_DOCTYPE_name_state.
#char:U+000A LINE FEED (LF)
Switch to the Before_DOCTYPE_name_state.
#char:U+000C FORM FEED (FF)
Switch to the Before_DOCTYPE_name_state.
#char:U+0020 SPACE
Switch to the Before_DOCTYPE_name_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
Reconsume in the Before_DOCTYPE_name_state.
#char:EOF
This is an eof-in-doctype parse error. Create a new DOCTYPE token. Set its force-quirks flag to on. Emit the token. Emit an end-of-file token.
#char:Anything else
This is a missing-whitespace-before-doctype-name parse error. Reconsume in the Before_DOCTYPE_name_state. 
#
#name:Before_DOCTYPE_name_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Ignore the character.
#char:U+000A LINE FEED (LF)
Ignore the character.
#char:U+000C FORM FEED (FF)
Ignore the character.
#char:U+0020 SPACE
Ignore the character.
#char:ASCII upper alpha
Create a new DOCTYPE token. Set the token's name to the lowercase version of the current input character (add 0x0020 to the character's code point). Switch to the DOCTYPE_name_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Create a new DOCTYPE token. Set the token's name to a U+FFFD REPLACEMENT CHARACTER character. Switch to the DOCTYPE_name_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
This is a missing-doctype-name parse error. Create a new DOCTYPE token. Set its force-quirks flag to on. Switch to the Data_state. Emit the token.
#char:EOF
This is an eof-in-doctype parse error. Create a new DOCTYPE token. Set its  force-quirks flag to on. Emit the token. Emit an end-of-file token.
#char:Anything else
Create a new DOCTYPE token. Set the token's name to the current input character. Switch to the DOCTYPE_name_state.
#
#name:DOCTYPE_name_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Switch to the After_DOCTYPE_name_state.
#char:U+000A LINE FEED (LF)
Switch to the After_DOCTYPE_name_state.
#char:U+000C FORM FEED (FF)
Switch to the After_DOCTYPE_name_state.
#char:U+0020 SPACE
Switch to the After_DOCTYPE_name_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Data_state. Emit the current DOCTYPE token.
#char:ASCII upper alpha
Append the lowercase version of the current input character (add 0x0020 to the character's code point) to the current DOCTYPE token's name.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's name.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
Append the current input character to the current DOCTYPE token's name.
#
#name:After_DOCTYPE_name_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Ignore the character.
#char:U+000A LINE FEED (LF)
Ignore the character.
#char:U+000C FORM FEED (FF)
Ignore the character.
#char:U+0020 SPACE
Ignore the character.
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Data_state. Emit the current DOCTYPE token.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
 If the six characters starting from the current input character are an ASCII case-insensitive match for the word "PUBLIC", then consume those characters and switch to the After_DOCTYPE_public_keyword_state. Otherwise, if the six characters starting from the current input character are an ASCII case-insensitive match for the word "SYSTEM", then consume those characters and switch to the After_DOCTYPE_system_keyword_state. Otherwise, this is an invalid-character-sequence-after-doctype-name parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the Bogus_DOCTYPE_state. 
#
#name:After_DOCTYPE_public_keyword_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Switch to the Before_DOCTYPE_public_identifier_state.
#char:U+000A LINE FEED (LF)
Switch to the Before_DOCTYPE_public_identifier_state.
#char:U+000C FORM FEED (FF)
Switch to the Before_DOCTYPE_public_identifier_state.
#char:U+0020 SPACE
Switch to the Before_DOCTYPE_public_identifier_state.
#char:U+0022 QUOTATION MARK (")
This is a missing-whitespace-after-doctype-public-keyword parse error. Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to the DOCTYPE_public_identifier_double_quoted_state.
#char:U+0027 APOSTROPHE (')
This is a missing-whitespace-after-doctype-public-keyword parse error. Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to the DOCTYPE_public_identifier_single_quoted_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
This is a missing-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the Data_state. Emit that DOCTYPE token.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
This is a missing-quote-before-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the Bogus_DOCTYPE_state.
#
#name:Before_DOCTYPE_public_identifier_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Ignore the character.
#char:U+000A LINE FEED (LF)
Ignore the character.
#char:U+000C FORM FEED (FF)
Ignore the character.
#char:U+0020 SPACE
Ignore the character.
#char:U+0022 QUOTATION MARK (")
Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to the DOCTYPE_public_identifier_double_quoted_state.
#char:U+0027 APOSTROPHE (')
Set the DOCTYPE token's public identifier to the empty string (not missing), then switch to the DOCTYPE_public_identifier_single_quoted_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
This is a missing-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the Data_state. Emit that DOCTYPE token.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
This is a missing-quote-before-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the Bogus_DOCTYPE_state.
#
#name:DOCTYPE_public_identifier_double_quoted_state
#prev:
Consume the next input character:
#trans:
#char:U+0022 QUOTATION MARK (")
Switch to the After_DOCTYPE_public_identifier_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's public identifier.
#char:U+003E GREATER-THAN SIGN (&gt;)
This is an abrupt-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the Data_state. Emit that DOCTYPE token.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
Append the current input character to the current DOCTYPE token's public identifier.
#
#name:DOCTYPE_public_identifier_single_quoted_state
#prev:
Consume the next input character:
#trans:
#char:U+0027 APOSTROPHE (')
Switch to the After_DOCTYPE_public_identifier_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's public identifier.
#char:U+003E GREATER-THAN SIGN (&gt;)
This is an abrupt-doctype-public-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the Data_state. Emit that DOCTYPE token.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
Append the current input character to the current DOCTYPE token's public identifier.
#
#name:After_DOCTYPE_public_identifier_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Switch to the Between_DOCTYPE_public_and_system_identifiers_state.
#char:U+000A LINE FEED (LF)
Switch to the Between_DOCTYPE_public_and_system_identifiers_state.
#char:U+000C FORM FEED (FF)
Switch to the Between_DOCTYPE_public_and_system_identifiers_state.
#char:U+0020 SPACE
Switch to the Between_DOCTYPE_public_and_system_identifiers_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Data_state. Emit the current DOCTYPE token.
#char:U+0022 QUOTATION MARK (")
This is a missing-whitespace-between-doctype-public-and-system-identifiers parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE_system_identifier_double_quoted_state.
#char:U+0027 APOSTROPHE (')
This is a missing-whitespace-between-doctype-public-and-system-identifiers parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE_system_identifier_single_quoted_state.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the Bogus_DOCTYPE_state.
#
#name:Between_DOCTYPE_public_and_system_identifiers_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Ignore the character.
#char:U+000A LINE FEED (LF)
Ignore the character.
#char:U+000C FORM FEED (FF)
Ignore the character.
#char:U+0020 SPACE
Ignore the character.
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Data_state. Emit the current DOCTYPE token.
#char:U+0022 QUOTATION MARK (")
Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE_system_identifier_double_quoted_state.
#char:U+0027 APOSTROPHE (')
Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE_system_identifier_single_quoted_state.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the Bogus_DOCTYPE_state.
#
#name:After_DOCTYPE_system_keyword_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Switch to the Before_DOCTYPE_system_identifier_state.
#char:U+000A LINE FEED (LF)
Switch to the Before_DOCTYPE_system_identifier_state.
#char:U+000C FORM FEED (FF)
Switch to the Before_DOCTYPE_system_identifier_state.
#char:U+0020 SPACE
Switch to the Before_DOCTYPE_system_identifier_state.
#char:U+0022 QUOTATION MARK (")
This is a missing-whitespace-after-doctype-system-keyword parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE_system_identifier_double_quoted_state.
#char:U+0027 APOSTROPHE (')
This is a missing-whitespace-after-doctype-system-keyword parse error. Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE_system_identifier_single_quoted_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
This is a missing-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the Data_state. Emit that DOCTYPE token.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the Bogus_DOCTYPE_state.
#
#name:Before_DOCTYPE_system_identifier_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Ignore the character.
#char:U+000A LINE FEED (LF)
Ignore the character.
#char:U+000C FORM FEED (FF)
Ignore the character.
#char:U+0020 SPACE
Ignore the character.
#char:U+0022 QUOTATION MARK (")
Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE_system_identifier_double_quoted_state.
#char:U+0027 APOSTROPHE (')
Set the DOCTYPE token's system identifier to the empty string (not missing), then switch to the DOCTYPE_system_identifier_single_quoted_state.
#char:U+003E GREATER-THAN SIGN (&gt;)
This is a missing-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the Data_state. Emit that DOCTYPE token.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
This is a missing-quote-before-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Reconsume in the Bogus_DOCTYPE_state.
#
#name:DOCTYPE_system_identifier_double_quoted_state
#prev:
Consume the next input character:
#trans:
#char:U+0022 QUOTATION MARK (")
Switch to the After_DOCTYPE_system_identifier_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's system identifier.
#char:U+003E GREATER-THAN SIGN (&gt;)
This is an abrupt-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the Data_state. Emit that DOCTYPE token.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
Append the current input character to the current DOCTYPE token's system identifier.
#
#name:DOCTYPE_system_identifier_single_quoted_state
#prev:
Consume the next input character:
#trans:
#char:U+0027 APOSTROPHE (')
Switch to the After_DOCTYPE_system_identifier_state.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Append a U+FFFD REPLACEMENT CHARACTER character to the current DOCTYPE token's system identifier.
#char:U+003E GREATER-THAN SIGN (&gt;)
This is an abrupt-doctype-system-identifier parse error. Set the DOCTYPE token's force-quirks flag to on. Switch to the Data_state. Emit that DOCTYPE token.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
Append the current input character to the current DOCTYPE token's system identifier.
#
#name:After_DOCTYPE_system_identifier_state
#prev:
Consume the next input character:
#trans:
#char:U+0009 CHARACTER TABULATION (tab)
Ignore the character.
#char:U+000A LINE FEED (LF)
Ignore the character.
#char:U+000C FORM FEED (FF)
Ignore the character.
#char:U+0020 SPACE
Ignore the character.
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Data_state. Emit the current DOCTYPE token.
#char:EOF
This is an eof-in-doctype parse error. Set the DOCTYPE token's force-quirks flag to on. Emit that DOCTYPE token. Emit an end-of-file token.
#char:Anything else
This is an unexpected-character-after-doctype-system-identifier parse error. Reconsume in the Bogus_DOCTYPE_state. (This does not set the DOCTYPE token's force-quirks flag to on.)
#
#name:Bogus_DOCTYPE_state
#prev:
Consume the next input character:
#trans:
#char:U+003E GREATER-THAN SIGN (&gt;)
Switch to the Data_state. Emit the DOCTYPE token.
#char:U+0000 NULL
This is an unexpected-null-character parse error. Ignore the character.
#char:EOF
Emit the DOCTYPE token. Emit an end-of-file token.
#char:Anything else
Ignore the character.
#
#name:CDATA_section_state
#prev:
Consume the next input character:
#trans:
#char:U+005D RIGHT SQUARE BRACKET (])
Switch to the CDATA_section_bracket_state.
#char:EOF
This is an eof-in-cdata parse error. Emit an end-of-file token.
#char:Anything else
Emit the current input character as a character token.
#
#name:CDATA_section_bracket_state
#prev:
Consume the next input character:
#trans:
#char:U+005D RIGHT SQUARE BRACKET (])
Switch to the CDATA_section_end_state.
#char:Anything else
Emit a U+005D RIGHT SQUARE BRACKET character token. Reconsume in the CDATA_section_state.
#
#name:CDATA_section_end_state
#prev:
Consume the next input character:
#trans:
#char:U+005D RIGHT SQUARE BRACKET (])
Emit a U+005D RIGHT SQUARE BRACKET character token.
#char:U+003E GREATER-THAN SIGN character
Switch to the Data_state.
#char:Anything else
Emit two U+005D RIGHT SQUARE BRACKET character tokens. Reconsume in the CDATA_section_state.
#
#name:Character_reference_state
#prev:
Set the temporary buffer to the empty string. Append a U+0026 AMPERSAND (&amp;) character to the temporary buffer. Consume the next input character:
#trans:
#char:ASCII alphanumeric
Reconsume in the Named_character_reference_state.
#char:U+0023 NUMBER SIGN (#)
Append the current input character to the temporary buffer. Switch to the Numeric_character_reference_state.
#char:Anything else
Flush code points consumed as a character reference. Reconsume in the return state.
#
#name:Named_character_reference_state
#prev:
Consume the maximum number of characters possible, where the consumed characters are one of the identifiers in the first column of the named character references table. Append each character to the temporary buffer when it's consumed.
#trans:
#char:If there is a match
 If the character reference was consumed as part of an attribute, and the last character matched is not a U+003B SEMICOLON character (;), and the next input character is either a U+003D EQUALS SIGN character (=) or an ASCII alphanumeric, then, for historical reasons, flush code points consumed as a character reference and switch to the return state.  Otherwise: If the last character matched is not a U+003B SEMICOLON character (;), then this is a missing-semicolon-after-character-reference parse error.Set the temporary buffer to the empty string. Append one or two characters corresponding to the character reference name (as given by the second column of the named character references table) to the temporary buffer.Flush code points consumed as a character reference. Switch to the return state. 
#char:Otherwise
Flush code points consumed as a character reference. Switch to the Ambiguous_ampersand_state.
#
#name:Ambiguous_ampersand_state
#prev:
Consume the next input character:
#trans:
#char:ASCII alphanumeric
If the character reference was consumed as part of an attribute, then append the current input character to the current attribute's value. Otherwise, emit the current input character as a character token.
#char:U+003B SEMICOLON (;)
This is an unknown-named-character-reference parse error. Reconsume in the return state. 
#char:Anything else
Reconsume in the return state.
#
#name:Numeric_character_reference_state
#prev:
Set the character reference code to zero (0).Consume the next input character:
#trans:
#char:U+0078 LATIN SMALL LETTER X
Append the current input character to the temporary buffer. Switch to the Hexadecimal_character_reference_start_state.
#char:U+0058 LATIN CAPITAL LETTER X
Append the current input character to the temporary buffer. Switch to the Hexadecimal_character_reference_start_state.
#char:Anything else
Reconsume in the Decimal_character_reference_start_state.
#
#name:Hexadecimal_character_reference_start_state
#prev:
Consume the next input character:
#trans:
#char:ASCII hex digit
Reconsume in the Hexadecimal_character_reference_state.
#char:Anything else
This is an absence-of-digits-in-numeric-character-reference parse error. Flush code points consumed as a character reference. Reconsume in the return state.
#
#name:Decimal_character_reference_start_state
#prev:
Consume the next input character:
#trans:
#char:ASCII digit
Reconsume in the Decimal_character_reference_state.
#char:Anything else
This is an absence-of-digits-in-numeric-character-reference parse error. Flush code points consumed as a character reference. Reconsume in the return state.
#
#name:Hexadecimal_character_reference_state
#prev:
Consume the next input character:
#trans:
#char:ASCII digit
Multiply the character reference code by 16. Add a numeric version of the current input character (subtract 0x0030 from the character's code point) to the character reference code.
#char:ASCII upper hex digit
Multiply the character reference code by 16. Add a numeric version of the current input character as a hexadecimal digit (subtract 0x0037 from the character's code point) to the character reference code.
#char:ASCII lower hex digit
Multiply the character reference code by 16. Add a numeric version of the current input character as a hexadecimal digit (subtract 0x0057 from the character's code point) to the character reference code.
#char:U+003B SEMICOLON
Switch to the Numeric_character_reference_end_state.
#char:Anything else
This is a missing-semicolon-after-character-reference parse error. Reconsume in the Numeric_character_reference_end_state.
#
#name:Decimal_character_reference_state
#prev:
Consume the next input character:
#trans:
#char:ASCII digit
Multiply the character reference code by 10. Add a numeric version of the current input character (subtract 0x0030 from the character's code point) to the character reference code.
#char:U+003B SEMICOLON
Switch to the Numeric_character_reference_end_state.
#char:Anything else
This is a missing-semicolon-after-character-reference parse error. Reconsume in the Numeric_character_reference_end_state.
#
