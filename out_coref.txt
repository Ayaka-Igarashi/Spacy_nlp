[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Set) (NP (DT the) (NN return) (NN state)) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Character_reference_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Tag_open_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Set) (NP (DT the) (NN return) (NN state)) (PP (IN to) (NP (DT the) (NN RCDATA_state)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Character_reference_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN RCDATA_less_than_sign_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN RAWTEXT_less_than_sign_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_less_than_sign_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Markup_declaration_open_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN End_tag_open_state)))) (. .))
[0: [5], [8]]
(S (VP (VP (VB Create) (NP (DT a) (JJ new) (NN start) (NN tag) (NN token))) (CC and) (VP (VB set) (NP (PRP$ its) (NN tag) (NN name)) (PP (IN to) (NP (DT the) (JJ empty) (NN string))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Tag_name_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_question_mark_instead_of_tag_name) (NN parse) (NN error))) (. .))
(S (VP (VB Create) (NP (NP (DT a) (NN comment) (NN token)) (SBAR (WHNP (WP$ whose) (NNS data)) (S (VP (VBZ is) (NP (DT the) (JJ empty) (NN string))))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Bogus_comment_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_before_tag_name) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (NP (NP (DT a) (NNP U+003C)) (PP (IN LESS_THAN) (NP (NNP SIGN) (NN character) (NN token)))) (CC and) (NP (DT an) (NN end_of_file) (NN token)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN invalid_first_character_of_tag_name) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003C)) (IN LESS_THAN) (S (VP (VB SIGN) (NP (NN character) (NN token)))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Data_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[0: [5], [8]]
(S (VP (VP (VB Create) (NP (DT a) (JJ new) (NML (NN end) (NN tag)) (NN token))) (, ,) (VP (VB set) (NP (PRP$ its) (NN tag) (NN name)) (PP (IN to) (NP (DT the) (JJ empty) (NN string))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Tag_name_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_end_tag_name) (NN parse) (NN error))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_before_tag_name) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003C) (IN LESS_THAN) (JJ SIGN) (NN character) (NN token)) (, ,) (NP (DT a) (NNP U+002F) (NNP SOLIDUS) (NN character) (NN token)) (CC and) (NP (DT an) (NN end_of_file) (NN token)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN invalid_first_character_of_tag_name) (NN parse) (NN error))) (. .))
(S (VP (VB Create) (NP (NP (DT a) (NN comment) (NN token)) (SBAR (WHNP (WP$ whose) (NNS data)) (S (VP (VBZ is) (NP (DT the) (JJ empty) (NN string))))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Bogus_comment_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Self_closing_start_tag_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN tag) (NN token))) (. .))
[]
(S (VP (S (VP (VB Append) (NP (NP (DT the) (JJ lowercase) (NN version)) (PP (IN of) (NP (DT the) (JJ current) (NN input) (NN character)))))) (PRN (-LRB- -LRB-) (S (VP (VB add) (NP (CD 0x0020)) (PP (IN to) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN tag) (NN token) (POS 's)) (NN tag) (NN name)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Append) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN tag) (NN token) (POS 's)) (NN tag) (NN name)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_tag) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN tag) (NN token) (POS 's)) (NN tag) (NN name)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Set) (NP (DT the) (JJ temporary) (NN buffer)) (PP (IN to) (NP (DT the) (JJ empty) (NN string)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN RCDATA_end_tag_open_state)))) (. .))
[]
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003C)) (IN LESS_THAN) (S (VP (VB SIGN) (NP (NN character) (NN token)))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN RCDATA_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[0: [5], [8]]
(S (VP (VP (VB Create) (NP (DT a) (JJ new) (NML (NN end) (NN tag)) (NN token))) (, ,) (VP (VB set) (NP (PRP$ its) (NN tag) (NN name)) (PP (IN to) (NP (DT the) (JJ empty) (NN string))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN RCDATA_end_tag_name_state)))) (. .))
[]
(S (VP (VB Emit) (NP (NP (DT a) (UCP (NNP U+003C) (NNP LESS_THAN)) (NNP SIGN) (NN character) (NN token)) (CC and) (NP (DT a) (NNP U+002F) (NNP SOLIDUS) (NN character) (NN token)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN RCDATA_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NN end) (NN tag) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Self_closing_start_tag_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [28]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VP (VB switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (CC and) (VP (VB emit) (NP (DT the) (JJ current) (NN tag) (NN token)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[]
(S (VP (S (VP (VB Append) (NP (NP (DT the) (JJ lowercase) (NN version)) (PP (IN of) (NP (DT the) (JJ current) (NN input) (NN character)))))) (PRN (-LRB- -LRB-) (S (VP (VB add) (NP (CD 0x0020)) (PP (IN to) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN tag) (NN token) (POS 's)) (NN tag) (NN name)))) (. .))
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN tag) (NN token) (POS 's)) (NN tag) (NN name)))) (. .))
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
[0: [19], [31], 1: [26], [36]]
(S (VP (VB Emit) (NP (NP (DT a) (NML (NNP U+003C) (NNP LESS_THAN)) (JJ SIGN) (NN character) (NN token)) (, ,) (NP (DT a) (NNP U+002F) (NNP SOLIDUS) (NN character) (NN token)) (, ,) (CC and) (NP (NP (NP (DT a) (NN character) (NN token)) (PP (IN for) (NP (NP (DT each)) (PP (IN of) (NP (NP (DT the) (NNS characters)) (PP (IN in) (NP (DT the) (JJ temporary) (NN buffer)))))))) (-LRB- -LRB-) (PP (IN in) (NP (NP (DT the) (NN order)) (SBAR (S (NP (PRP they)) (VP (VBD were) (VP (VBN added) (PP (IN to) (NP (DT the) (NN buffer))))))))) (-RRB- -RRB-)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN RCDATA_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Set) (NP (DT the) (JJ temporary) (NN buffer)) (PP (IN to) (NP (DT the) (JJ empty) (NN string)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN RAWTEXT_end_tag_open_state)))) (. .))
[]
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003C)) (IN LESS_THAN) (S (VP (VB SIGN) (NP (NN character) (NN token)))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN RAWTEXT_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[0: [5], [8]]
(S (VP (VP (VB Create) (NP (DT a) (JJ new) (NML (NN end) (NN tag)) (NN token))) (, ,) (VP (VB set) (NP (PRP$ its) (NN tag) (NN name)) (PP (IN to) (NP (DT the) (JJ empty) (NN string))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN RAWTEXT_end_tag_name_state)))) (. .))
[]
(S (VP (VB Emit) (NP (NP (DT a) (UCP (NNP U+003C) (NNP LESS_THAN)) (NNP SIGN) (NN character) (NN token)) (CC and) (NP (DT a) (NNP U+002F) (NNP SOLIDUS) (NN character) (NN token)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN RAWTEXT_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NN end) (NN tag) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Self_closing_start_tag_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [28]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VP (VB switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (CC and) (VP (VB emit) (NP (DT the) (JJ current) (NN tag) (NN token)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[]
(S (VP (S (VP (VB Append) (NP (NP (DT the) (JJ lowercase) (NN version)) (PP (IN of) (NP (DT the) (JJ current) (NN input) (NN character)))))) (PRN (-LRB- -LRB-) (S (VP (VB add) (NP (CD 0x0020)) (PP (IN to) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN tag) (NN token) (POS 's)) (NN tag) (NN name)))) (. .))
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN tag) (NN token) (POS 's)) (NN tag) (NN name)))) (. .))
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
[0: [19], [31], 1: [26], [36]]
(S (VP (VB Emit) (NP (NP (DT a) (NML (NNP U+003C) (NNP LESS_THAN)) (JJ SIGN) (NN character) (NN token)) (, ,) (NP (DT a) (NNP U+002F) (NNP SOLIDUS) (NN character) (NN token)) (, ,) (CC and) (NP (NP (NP (DT a) (NN character) (NN token)) (PP (IN for) (NP (NP (DT each)) (PP (IN of) (NP (NP (DT the) (NNS characters)) (PP (IN in) (NP (DT the) (JJ temporary) (NN buffer)))))))) (-LRB- -LRB-) (PP (IN in) (NP (NP (DT the) (NN order)) (SBAR (S (NP (PRP they)) (VP (VBD were) (VP (VBN added) (PP (IN to) (NP (DT the) (NN buffer))))))))) (-RRB- -RRB-)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN RAWTEXT_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Set) (NP (DT the) (JJ temporary) (NN buffer)) (PP (IN to) (NP (DT the) (JJ empty) (NN string)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_end_tag_open_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escape_start_state)))) (. .))
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003C) (PP (RP LESS_THAN)) (NNP SIGN) (NN character) (NN token)) (CC and) (NP (DT a) (NNP U+0021) (NML (NNP EXCLAMATION) (NNP MARK)) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003C)) (IN LESS_THAN) (S (VP (VB SIGN) (NP (NN character) (NN token)))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[0: [5], [8]]
(S (VP (VP (VB Create) (NP (DT a) (JJ new) (NML (NN end) (NN tag)) (NN token))) (, ,) (VP (VB set) (NP (PRP$ its) (NN tag) (NN name)) (PP (IN to) (NP (DT the) (JJ empty) (NN string))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_end_tag_name_state)))) (. .))
[]
(S (VP (VB Emit) (NP (NP (DT a) (UCP (NNP U+003C) (NNP LESS_THAN)) (NNP SIGN) (NN character) (NN token)) (CC and) (NP (DT a) (NNP U+002F) (NNP SOLIDUS) (NN character) (NN token)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NN end) (NN tag) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Self_closing_start_tag_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [28]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VP (VB switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (CC and) (VP (VB emit) (NP (DT the) (JJ current) (NN tag) (NN token)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[]
(S (VP (S (VP (VB Append) (NP (NP (DT the) (JJ lowercase) (NN version)) (PP (IN of) (NP (DT the) (JJ current) (NN input) (NN character)))))) (PRN (-LRB- -LRB-) (S (VP (VB add) (NP (CD 0x0020)) (PP (IN to) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN tag) (NN token) (POS 's)) (NN tag) (NN name)))) (. .))
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN tag) (NN token) (POS 's)) (NN tag) (NN name)))) (. .))
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
[0: [19], [31], 1: [26], [36]]
(S (VP (VB Emit) (NP (NP (DT a) (NML (NNP U+003C) (NNP LESS_THAN)) (JJ SIGN) (NN character) (NN token)) (, ,) (NP (DT a) (NNP U+002F) (NNP SOLIDUS) (NN character) (NN token)) (, ,) (CC and) (NP (NP (NP (DT a) (NN character) (NN token)) (PP (IN for) (NP (NP (DT each)) (PP (IN of) (NP (NP (DT the) (NNS characters)) (PP (IN in) (NP (DT the) (JJ temporary) (NN buffer)))))))) (-LRB- -LRB-) (PP (IN in) (NP (NP (DT the) (NN order)) (SBAR (S (NP (PRP they)) (VP (VBD were) (VP (VBN added) (PP (IN to) (NP (DT the) (NN buffer))))))))) (-RRB- -RRB-)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escape_start_dash_state)))) (. .))
(S (VP (VB Emit) (NP (DT a) (NNP U+002D) (NNP HYPHEN_MINUS) (NN character) (NN token))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_dash_dash_state)))) (. .))
(S (VP (VB Emit) (NP (DT a) (NNP U+002D) (NNP HYPHEN_MINUS) (NN character) (NN token))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_dash_state)))) (. .))
(S (VP (VB Emit) (NP (DT a) (NNP U+002D) (NNP HYPHEN_MINUS) (NN character) (NN token))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_less_than_sign_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_script_html_comment_like_text) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_dash_dash_state)))) (. .))
(S (VP (VB Emit) (NP (DT a) (NNP U+002D) (NNP HYPHEN_MINUS) (NN character) (NN token))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_less_than_sign_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_script_html_comment_like_text) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Emit) (NP (DT a) (NNP U+002D) (NNP HYPHEN_MINUS) (NN character) (NN token))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_less_than_sign_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_state)))) (. .))
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003E)) (PP (IN GREATER_THAN) (NP (VB SIGN) (NN character) (NN token))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_script_html_comment_like_text) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Set) (NP (DT the) (JJ temporary) (NN buffer)) (PP (IN to) (NP (DT the) (JJ empty) (NN string)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_end_tag_open_state)))) (. .))
[]
(S (VP (VB Set) (NP (DT the) (JJ temporary) (NN buffer)) (PP (IN to) (NP (DT the) (JJ empty) (NN string)))) (. .))
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003C)) (IN LESS_THAN) (S (VP (VB SIGN) (NP (NN character) (NN token)))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_double_escape_start_state)))) (. .))
[]
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003C)) (IN LESS_THAN) (S (VP (VB SIGN) (NP (NN character) (NN token)))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[0: [5], [8]]
(S (VP (VP (VB Create) (NP (DT a) (JJ new) (NML (NN end) (NN tag)) (NN token))) (, ,) (VP (VB set) (NP (PRP$ its) (NN tag) (NN name)) (PP (IN to) (NP (DT the) (JJ empty) (NN string))))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_escaped_end_tag_name_state)))) (. .))
[]
(S (VP (VB Emit) (NP (NP (DT a) (UCP (NNP U+003C) (NNP LESS_THAN)) (NNP SIGN) (NN character) (NN token)) (CC and) (NP (DT a) (NNP U+002F) (NNP SOLIDUS) (NN character) (NN token)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [22]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NN end) (NN tag) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Self_closing_start_tag_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [17], [28]]
(S (SBAR (IN If) (S (NP (DT the) (JJ current) (NML (NN end) (NN tag)) (NN token)) (VP (VBZ is) (NP (DT an) (JJ appropriate) (NML (NN end) (NN tag)) (NN token))))) (, ,) (ADVP (RB then)) (VP (VP (VB switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (CC and) (VP (VB emit) (NP (DT the) (JJ current) (NN tag) (NN token)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[]
(S (VP (S (VP (VB Append) (NP (NP (DT the) (JJ lowercase) (NN version)) (PP (IN of) (NP (DT the) (JJ current) (NN input) (NN character)))))) (PRN (-LRB- -LRB-) (S (VP (VB add) (NP (CD 0x0020)) (PP (IN to) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN tag) (NN token) (POS 's)) (NN tag) (NN name)))) (. .))
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN tag) (NN token) (POS 's)) (NN tag) (NN name)))) (. .))
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
[0: [19], [32], 1: [26], [37]]
(S (VP (VB Emit) (NP (NP (DT a) (NML (NNP U+003C) (NNP LESS_THAN)) (JJ SIGN) (NN character) (NN token)) (, ,) (NP (DT a) (NNP U+002F) (NNP SOLIDUS) (NN character) (NN token)) (, ,) (CC and) (NP (NP (NP (DT a) (NN character) (NN token)) (PP (IN for) (NP (NP (DT each)) (PP (IN of) (NP (NP (DT the) (NNS characters)) (PP (IN in) (NP (DT the) (JJ temporary) (NN buffer)))))))) (-LRB-  ) (-LRB- -LRB-) (PP (IN in) (NP (NP (DT the) (NN order)) (SBAR (S (NP (PRP they)) (VP (VBD were) (VP (VBN added) (PP (IN to) (NP (DT the) (NN buffer))))))))) (-RRB- -RRB-)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (SBAR (IN If) (S (NP (DT the) (JJ temporary) (NN buffer)) (VP (VBZ is) (NP (DT the) (NN string) (`` ") (NN script))))) (, ") (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (SBAR (IN If) (S (NP (DT the) (JJ temporary) (NN buffer)) (VP (VBZ is) (NP (DT the) (NN string) (`` ") (NN script))))) (, ") (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (SBAR (IN If) (S (NP (DT the) (JJ temporary) (NN buffer)) (VP (VBZ is) (NP (DT the) (NN string) (`` ") (NN script))))) (, ") (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (SBAR (IN If) (S (NP (DT the) (JJ temporary) (NN buffer)) (VP (VBZ is) (NP (DT the) (NN string) (`` ") (NN script))))) (, ") (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (SBAR (IN If) (S (NP (DT the) (JJ temporary) (NN buffer)) (VP (VBZ is) (NP (DT the) (NN string) (`` ") (NN script))))) (, ") (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (SBAR (IN If) (S (NP (DT the) (JJ temporary) (NN buffer)) (VP (VBZ is) (NP (DT the) (NN string) (`` ") (NN script))))) (, ") (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Append) (NP (NP (DT the) (JJ lowercase) (NN version)) (PP (IN of) (NP (DT the) (JJ current) (NN input) (NN character)))) (PRN (-LRB- -LRB-) (S (VP (VB add) (NP (CD 0x0020)) (PP (IN to) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_dash_state)))) (. .))
(S (VP (VB Emit) (NP (DT a) (NNP U+002D) (NNP HYPHEN_MINUS) (NN character) (NN token))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_less_than_sign_state)))) (. .))
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003C)) (PP (IN LESS_THAN) (S (VP (VB SIGN) (NN character) (NN token)))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_script_html_comment_like_text) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_dash_dash_state)))) (. .))
(S (VP (VB Emit) (NP (DT a) (NNP U+002D) (NNP HYPHEN_MINUS) (NN character) (NN token))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_less_than_sign_state)))) (. .))
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003C)) (PP (IN LESS_THAN) (S (VP (VB SIGN) (NN character) (NN token)))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_script_html_comment_like_text) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Emit) (NP (DT a) (NNP U+002D) (NNP HYPHEN_MINUS) (NN character) (NN token))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_less_than_sign_state)))) (. .))
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003C)) (PP (IN LESS_THAN) (S (VP (VB SIGN) (NN character) (NN token)))))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_state)))) (. .))
(S (VP (VB Emit) (NP (NP (DT a) (NNP U+003E)) (PP (IN GREATER_THAN) (NP (VB SIGN) (NN character) (NN token))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_script_html_comment_like_text) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Set) (NP (DT the) (JJ temporary) (NN buffer)) (PP (IN to) (NP (DT the) (JJ empty) (NN string)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escape_end_state)))) (. .))
(S (VP (VB Emit) (NP (DT a) (NML (NNP U+002F) (NNP SOLIDUS)) (NN character) (NN token))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (SBAR (IN If) (S (NP (DT the) (JJ temporary) (NN buffer)) (VP (VBZ is) (NP (DT the) (NN string) (`` ") (NN script))))) (, ") (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (SBAR (IN If) (S (NP (DT the) (JJ temporary) (NN buffer)) (VP (VBZ is) (NP (DT the) (NN string) (`` ") (NN script))))) (, ") (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (SBAR (IN If) (S (NP (DT the) (JJ temporary) (NN buffer)) (VP (VBZ is) (NP (DT the) (NN string) (`` ") (NN script))))) (, ") (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (SBAR (IN If) (S (NP (DT the) (JJ temporary) (NN buffer)) (VP (VBZ is) (NP (DT the) (NN string) (`` ") (NN script))))) (, ") (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (SBAR (IN If) (S (NP (DT the) (JJ temporary) (NN buffer)) (VP (VBZ is) (NP (DT the) (NN string) (`` ") (NN script))))) (, ") (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (SBAR (IN If) (S (NP (DT the) (JJ temporary) (NN buffer)) (VP (VBZ is) (NP (DT the) (NN string) (`` ") (NN script))))) (, ") (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_escaped_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Append) (NP (NP (DT the) (JJ lowercase) (NN version)) (PP (IN of) (NP (DT the) (JJ current) (NN input) (NN character)))) (PRN (-LRB- -LRB-) (S (VP (VB add) (NP (CD 0x0020)) (PP (IN to) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Script_data_double_escaped_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN After_attribute_name_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN After_attribute_name_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN After_attribute_name_state)))) (. .))
[0: [0], [29]]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_equals_sign_before_attribute_name) (NN parse) (NN error))) (. .))
(S (VP (VB Start) (NP (DT a) (JJ new) (NN attribute)) (PP (IN in) (NP (DT the) (JJ current) (NN tag) (NN token)))) (. .))
(S (VP (VP (VB Set) (NP (NP (DT that) (NN attribute) (POS 's)) (NN name)) (PP (IN to) (NP (DT the) (JJ current) (JJ input) (NN character)))) (, ,) (CC and) (VP (NP (PRP$ its) (NN value)) (PP (IN to) (NP (DT the) (JJ empty) (NN string))))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Attribute_name_state)))) (. .))
[]
(S (VP (VB Start) (NP (DT a) (JJ new) (NN attribute)) (PP (IN in) (NP (DT the) (JJ current) (NN tag) (NN token)))) (. .))
(S (VP (VB Set) (NP (DT that) (NN attribute) (NN name) (CC and) (NN value)) (PP (IN to) (NP (DT the) (JJ empty) (NN string)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Attribute_name_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN After_attribute_name_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN After_attribute_name_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN After_attribute_name_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN After_attribute_name_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN After_attribute_name_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN After_attribute_name_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN After_attribute_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_value_state)))) (. .))
[]
(S (VP (S (VP (VB Append) (NP (NP (DT the) (JJ lowercase) (NN version)) (PP (IN of) (NP (DT the) (JJ current) (NN input) (NN character)))))) (PRN (-LRB- -LRB-) (S (VP (VB add) (NP (CD 0x0020)) (PP (IN to) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN attribute) (POS 's)) (NN name)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Append) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN attribute) (POS 's)) (NN name)))) (. .))
[0: [0], [8]]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_character_in_attribute_name) (NN parse) (NN error))) (. .))
(S (VP (VB Treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [0], [8]]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_character_in_attribute_name) (NN parse) (NN error))) (. .))
(S (VP (VB Treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [0], [8]]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_character_in_attribute_name) (NN parse) (NN error))) (. .))
(S (VP (VB Treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN attribute) (POS 's)) (NN name)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Self_closing_start_tag_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_value_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN tag) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_tag) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Start) (NP (DT a) (JJ new) (NN attribute)) (PP (IN in) (NP (DT the) (JJ current) (NN tag) (NN token)))) (. .))
(S (VP (VB Set) (NP (DT that) (NN attribute) (NN name) (CC and) (NN value)) (PP (IN to) (NP (DT the) (JJ empty) (NN string)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Attribute_name_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Attribute_value_double_quoted_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Attribute_value_single_quoted_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_attribute_value) (NN parse) (NN error))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN tag) (NN token))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Attribute_value_unquoted_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN After_attribute_value_quoted_state)))) (. .))
[]
(S (VP (VB Set) (NP (DT the) (NN return) (NN state)) (PP (IN to) (NP (DT the) (NN Attribute_value_double_quoted_state)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Character_reference_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Append) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN attribute) (POS 's)) (NN value)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_tag) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN attribute) (POS 's)) (NN value)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN After_attribute_value_quoted_state)))) (. .))
[]
(S (VP (VB Set) (NP (DT the) (NN return) (NN state)) (PP (IN to) (NP (DT the) (NN Attribute_value_single_quoted_state)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Character_reference_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Append) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN attribute) (POS 's)) (NN value)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_tag) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN attribute) (POS 's)) (NN value)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Set) (NP (DT the) (NN return) (NN state)) (PP (IN to) (NP (DT the) (NN Attribute_value_unquoted_state)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Character_reference_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN tag) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Append) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN attribute) (POS 's)) (NN value)))) (. .))
[0: [0], [8]]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_character_in_unquoted_attribute_value) (NN parse) (NN error))) (. .))
(S (VP (VB Treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [0], [8]]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_character_in_unquoted_attribute_value) (NN parse) (NN error))) (. .))
(S (VP (VB Treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [0], [8]]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_character_in_unquoted_attribute_value) (NN parse) (NN error))) (. .))
(S (VP (VB Treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [0], [8]]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_character_in_unquoted_attribute_value) (NN parse) (NN error))) (. .))
(S (VP (VB Treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[0: [0], [8]]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_character_in_unquoted_attribute_value) (NN parse) (NN error))) (. .))
(S (VP (VB Treat) (NP (PRP it)) (PP (IN as) (PP (IN per) (NP (NP (DT the) (`` ") (NML (NN anything) (RB else)) ('' ") (NN entry)) (ADVP (RB below)))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_tag) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN attribute) (POS 's)) (NN value)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Self_closing_start_tag_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN tag) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_tag) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NNS missing_whitespace_between_attributes) (NN parse) (NN error))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Set) (NP (NP (DT the) (JJ self_closing) (NN flag)) (PP (IN of) (NP (DT the) (JJ current) (NN tag) (NN token))))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN tag) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_tag) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_solidus_in_tag) (NN parse) (NN error))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Before_attribute_name_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN comment) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT the) (NN comment))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Append) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)) (PP (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data)))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data)))) (. .))
[]
(SBAR (IN If) (S (NP (DT the) (JJ next) (JJ few) (NNS characters)) (VP (VBP are))) (: :))
[]
[]
(S (VP (VP (VB Consume) (NP (DT those) (CD two) (NNS characters))) (, ,) (VP (VB create) (NP (NP (DT a) (NN comment) (NN token)) (SBAR (WHNP (WP$ whose) (NNS data)) (S (VP (VBZ is) (NP (DT the) (JJ empty) (NN string))))))) (, ,) (CC and) (VP (VB switch) (PP (IN to) (NP (DT the) (NN Comment_start_state))))) (. .))
[]
(S (VP (VP (VB Consume) (NP (DT those) (NNS characters))) (CC and) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_state))))) (. .))
[0: [10], [12]]
(S (VP (VB Consume) (NP (DT those) (NNS characters))) (. .))
(S (SBAR (IN If) (S (S (NP (EX there)) (VP (VBZ is) (NP (DT an) (VBN adjusted) (JJ current) (NN node)))) (CC and) (S (NP (PRP it)) (VP (VBZ is) (RB not) (NP (NP (DT an) (NN element)) (PP (IN in) (NP (DT the) (NNP HTML) (NN namespace)))))))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN CDATA_section_state)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (NP (DT this)) (VP (VBZ is) (NP (DT a) (NML (NN cdata_in_html_content) (NN parse)) (NN error))) (. .))
(S (VP (VB Create) (NP (NP (DT a) (NN comment) (NN token)) (SBAR (WHNP (WP$ whose) (NNS data)) (S (VP (VBZ is) (NP (DT the) (`` ") (`` -LSB-) (NN CDATA) (SYM -LSB-) ('' ") (NN string))))))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Bogus_comment_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN incorrectly_opened_comment) (NN parse) (NN error))) (. .))
(S (VP (VB Create) (NP (NP (DT a) (NN comment) (NN token)) (SBAR (WHNP (WP$ whose) (NNS data)) (S (VP (VBZ is) (NP (DT the) (JJ empty) (NN string))))))) (. .))
(S (VP (S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Bogus_comment_state))))) (PRN (-LRB- -LRB-) (S (VP (VBP do) (RB n't) (VP (VB consume) (NP (NN anything)) (PP (IN in) (NP (DT the) (JJ current) (NN state)))))) (-RRB- -RRB-))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Comment_start_dash_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN abrupt_closing_of_empty_comment) (NN parse) (NN error))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN comment) (NN token))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Comment_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Comment_end_state)))))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN abrupt_closing_of_empty_comment) (NN parse) (NN error))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN comment) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_comment) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN comment) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (DT a) (NN U+002D))))
(NP (NP (NP (NNP HYPHEN_MINUS) (NN character)) (-LRB- -LRB-) (NP (CD _)) (-RRB- -RRB-)) (PP (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Comment_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Comment_less_than_sign_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Comment_end_dash_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Append) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)) (PP (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_comment) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN comment) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Comment_less_than_sign_bang_state)))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Comment_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Comment_less_than_sign_bang_dash_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Comment_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Comment_less_than_sign_bang_dash_dash_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Comment_end_dash_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Comment_end_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Comment_end_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN nested_comment) (NN parse) (NN error))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Comment_end_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Comment_end_state)))))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_comment) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN comment) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (DT a) (NN U+002D))))
(NP (NP (NP (NNP HYPHEN_MINUS) (NN character)) (-LRB- -LRB-) (NP (CD _)) (-RRB- -RRB-)) (PP (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Comment_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN comment) (NN token))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Comment_end_bang_state)))) (. .))
[]
(S (VP (VB Append) (NP (DT a) (NN U+002D))))
(NP (NP (NP (NNP HYPHEN_MINUS) (NN character)) (-LRB- -LRB-) (NP (CD _)) (-RRB- -RRB-)) (PP (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_comment) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN comment) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (NP (CD two) (NNP U+002D) (NNP HYPHEN_MINUS) (NNS characters)) (-LRB- -LRB-) (NP (CD _)) (-RRB- -RRB-)) (PP (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Comment_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Append) (NP (NP (NP (CD two) (NNP U+002D) (NNP HYPHEN_MINUS) (NNS characters)) (-LRB- -LRB-) (NP (CD _)) (-RRB- -RRB-)) (CC and) (NP (NP (DT a) (CD U+0021) (NML (NNP EXCLAMATION) (NNP MARK)) (NN character)) (-LRB- -LRB-) (HYPH _) (NN EXC) (-RRB- _) (-RRB- -RRB-))) (PP (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Comment_end_dash_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN incorrectly_closed_comment) (NN parse) (NN error))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN comment) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN eof_in_comment) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN comment) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(VP (VB Append) (NP (NP (NP (CD two) (NNP U+002D) (NNP HYPHEN_MINUS) (NNS characters)) (-LRB- -LRB-) (NP (CD _)) (-RRB- -RRB-)) (CC and) (NP (NP (NP (DT a) (CD U+0021) (NML (NNP EXCLAMATION) (NNP MARK)) (NN character)) (-LRB- -LRB-) (-RRB- !)) (. -RRB-))))
(FRAG (IN to) (NP (NP (DT the) (NN comment) (NN token) (POS 's)) (NNS data)) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Comment_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_DOCTYPE_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_DOCTYPE_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_DOCTYPE_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_DOCTYPE_name_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Before_DOCTYPE_name_state)))) (. .))
[0: [0], [14]]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Create) (NP (DT a) (JJ new) (NNP DOCTYPE) (NN token))) (. .))
(S (VP (VB Set) (NP (PRP$ its) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_whitespace_before_doctype_name) (NN parse) (NN error))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Before_DOCTYPE_name_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Create) (NP (DT a) (JJ new) (NNP DOCTYPE) (NN token))) (. .))
(S (S (VP (VB Set) (NP (NP (DT the) (NN token) (POS 's)) (NN name)) (PP (IN to) (NP (NP (DT the) (JJ lowercase) (NN version)) (PP (IN of) (NP (DT the) (JJ current) (NN input) (NN character))))))) (PRN (-LRB- -LRB-) (S (VP (VB add) (NP (CD 0x0020)) (PP (IN to) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-)) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_name_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Create) (NP (DT a) (JJ new) (NNP DOCTYPE) (NN token))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NN token) (POS 's)) (NN name)) (PP (IN to) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_name_state)))) (. .))
[0: [0], [14]]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_doctype_name) (NN parse) (NN error))) (. .))
(S (VP (VB Create) (NP (DT a) (JJ new) (NNP DOCTYPE) (NN token))) (. .))
(S (VP (VB Set) (NP (PRP$ its) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN token))) (. .))
[0: [0], [14]]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Create) (NP (DT a) (JJ new) (NNP DOCTYPE) (NN token))) (. .))
(S (VP (VB Set) (NP (PRP$ its) (NML (NN  ) (NNS force_quirks)) (NN flag)) (PP (IN to) (ADVP (RB on)))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Create) (NP (DT a) (JJ new) (NNP DOCTYPE) (NN token))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NN token) (POS 's)) (NN name)) (PP (IN to) (NP (DT the) (JJ current) (NN input) (NN character)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_name_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN After_DOCTYPE_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN After_DOCTYPE_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN After_DOCTYPE_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN After_DOCTYPE_name_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (NP (NP (DT the) (JJ lowercase) (NN version)) (PP (IN of) (NP (DT the) (JJ current) (NN input) (NN character)))) (PRN (-LRB- -LRB-) (S (VP (VB add) (NP (CD 0x0020)) (PP (IN to) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-))) (PP (IN to) (NP (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token) (POS 's)) (NN name)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Append) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token) (POS 's)) (NN name)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token) (POS 's)) (NN name)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[0: [3], [25], 1: [17], [51], 2: [37], [59]]
(S (SBAR (IN If) (S (NP (NP (DT the) (CD six) (NNS characters)) (VP (VBG starting) (PP (IN from) (NP (DT the) (JJ current) (NN input) (NN character))))) (VP (VBP are) (NP (NP (DT an) (NNP ASCII) (JJ case_insensitive) (NN match)) (PP (IN for) (NP (DT the) (NN word) (`` ") (NNP PUBLIC))))))) (, ") ('' ,) (ADVP (RB then)) (VP (VP (VB consume) (NP (DT those) (NNS characters))) (CC and) (VP (VB switch) (PP (IN to) (NP (DT the) (NN After_DOCTYPE_public_keyword_state))))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (SBAR (SBAR (IN if) (S (NP (NP (DT the) (CD six) (NNS characters)) (VP (VBG starting) (PP (IN from) (NP (DT the) (JJ current) (NN input) (NN character))))) (VP (VBP are) (NP (NP (DT an) (NNP ASCII) (JJ case_insensitive) (NN match)) (PP (IN for) (NP (DT the) (NN word) (`` ") (NN SYSTEM))))))) ('' ")) (, ,) (ADVP (RB then)) (VP (VP (VB consume) (NP (DT those) (NNS characters))) (CC and) (VP (VB switch) (PP (IN to) (NP (DT the) (NN After_DOCTYPE_system_keyword_state))))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (NP (DT this)) (VP (VBZ is) (NP (DT an) (NN invalid_character_sequence_after_doctype_name) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Bogus_DOCTYPE_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_DOCTYPE_public_identifier_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_DOCTYPE_public_identifier_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_DOCTYPE_public_identifier_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_DOCTYPE_public_identifier_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_whitespace_after_doctype_public_keyword) (NN parse) (NN error))) (. .))
(S (VP (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (JJ public) (NN identifier)) (PP (IN to) (NP (NP (DT the) (JJ empty) (NN string)) (-LRB- -LRB-) (ADJP (RB not) (VBG missing)) (-RRB- -RRB-)))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_public_identifier_double_quoted_state))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_whitespace_after_doctype_public_keyword) (NN parse) (NN error))) (. .))
(S (VP (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (JJ public) (NN identifier)) (PP (IN to) (NP (NP (DT the) (JJ empty) (NN string)) (-LRB- -LRB-) (ADJP (RB not) (VBG missing)) (-RRB- -RRB-)))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_public_identifier_single_quoted_state))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_doctype_public_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_quote_before_doctype_public_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Bogus_DOCTYPE_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (JJ public) (NN identifier)) (PP (IN to) (NP (NP (DT the) (JJ empty) (NN string)) (-LRB- -LRB-) (ADJP (RB not) (VBG missing)) (-RRB- -RRB-)))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_public_identifier_double_quoted_state))))) (. .))
[]
(S (VP (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (JJ public) (NN identifier)) (PP (IN to) (NP (NP (DT the) (JJ empty) (NN string)) (-LRB- -LRB-) (ADJP (RB not) (VBG missing)) (-RRB- -RRB-)))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_public_identifier_single_quoted_state))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_doctype_public_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_quote_before_doctype_public_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Bogus_DOCTYPE_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN After_DOCTYPE_public_identifier_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Append) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token) (POS 's)) (JJ public) (NN identifier)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN abrupt_doctype_public_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token) (POS 's)) (JJ public) (NN identifier)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN After_DOCTYPE_public_identifier_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Append) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token) (POS 's)) (JJ public) (NN identifier)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN abrupt_doctype_public_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token) (POS 's)) (JJ public) (NN identifier)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Between_DOCTYPE_public_and_system_identifiers_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Between_DOCTYPE_public_and_system_identifiers_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Between_DOCTYPE_public_and_system_identifiers_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Between_DOCTYPE_public_and_system_identifiers_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NNS missing_whitespace_between_doctype_public_and_system_identifiers) (NN parse) (NN error))) (. .))
(S (VP (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NN system) (NN identifier)) (PP (IN to) (NP (NP (DT the) (JJ empty) (NN string)) (-LRB- -LRB-) (ADJP (RB not) (VBG missing)) (-RRB- -RRB-)))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_system_identifier_double_quoted_state))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NNS missing_whitespace_between_doctype_public_and_system_identifiers) (NN parse) (NN error))) (. .))
(S (VP (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NN system) (NN identifier)) (PP (IN to) (NP (NP (DT the) (JJ empty) (NN string)) (-LRB- -LRB-) (ADJP (RB not) (VBG missing)) (-RRB- -RRB-)))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_system_identifier_single_quoted_state))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_quote_before_doctype_system_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Bogus_DOCTYPE_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token))) (. .))
[]
(S (VP (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NN system) (NN identifier)) (PP (IN to) (NP (NP (DT the) (JJ empty) (NN string)) (-LRB- -LRB-) (ADJP (RB not) (VBG missing)) (-RRB- -RRB-)))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_system_identifier_double_quoted_state))))) (. .))
[]
(S (VP (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NN system) (NN identifier)) (PP (IN to) (NP (NP (DT the) (JJ empty) (NN string)) (-LRB- -LRB-) (ADJP (RB not) (VBG missing)) (-RRB- -RRB-)))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_system_identifier_single_quoted_state))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_quote_before_doctype_system_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Bogus_DOCTYPE_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_DOCTYPE_system_identifier_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_DOCTYPE_system_identifier_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_DOCTYPE_system_identifier_state)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Before_DOCTYPE_system_identifier_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_whitespace_after_doctype_system_keyword) (NN parse) (NN error))) (. .))
(S (VP (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NN system) (NN identifier)) (PP (IN to) (NP (NP (DT the) (JJ empty) (NN string)) (-LRB- -LRB-) (ADJP (RB not) (VBG missing)) (-RRB- -RRB-)))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_system_identifier_double_quoted_state))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_whitespace_after_doctype_system_keyword) (NN parse) (NN error))) (. .))
(S (VP (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NN system) (NN identifier)) (PP (IN to) (NP (NP (DT the) (JJ empty) (NN string)) (-LRB- -LRB-) (ADJP (RB not) (VBG missing)) (-RRB- -RRB-)))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_system_identifier_single_quoted_state))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_doctype_system_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_quote_before_doctype_system_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Bogus_DOCTYPE_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NN system) (NN identifier)) (PP (IN to) (NP (NP (DT the) (JJ empty) (NN string)) (-LRB- -LRB-) (ADJP (RB not) (VBG missing)) (-RRB- -RRB-)))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_system_identifier_double_quoted_state))))) (. .))
[]
(S (VP (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NN system) (NN identifier)) (PP (IN to) (NP (NP (DT the) (JJ empty) (NN string)) (-LRB- -LRB-) (ADJP (RB not) (VBG missing)) (-RRB- -RRB-)))) (, ,) (ADVP (RB then)) (VP (VB switch) (PP (IN to) (NP (DT the) (NN DOCTYPE_system_identifier_single_quoted_state))))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_doctype_system_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_quote_before_doctype_system_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Bogus_DOCTYPE_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN After_DOCTYPE_system_identifier_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Append) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token) (POS 's)) (NN system) (NN identifier)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN abrupt_doctype_system_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token) (POS 's)) (NN system) (NN identifier)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN After_DOCTYPE_system_identifier_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Append) (NP (DT a) (NML (NNP U+FFFD) (NNP REPLACEMENT) (NNP CHARACTER)) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token) (POS 's)) (NN system) (NN identifier)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN abrupt_doctype_system_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token) (POS 's)) (NN system) (NN identifier)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (JJ current) (NNP DOCTYPE) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_doctype) (NN parse) (NN error))) (. .))
(S (VP (VB Set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on)))) (. .))
(S (VP (VB Emit) (NP (DT that) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_character_after_doctype_system_identifier) (NN parse) (NN error))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Bogus_DOCTYPE_state)))) (. .))
(S (-LRB- -LRB-) (NP (DT This)) (VP (VBZ does) (RB not) (VP (VB set) (NP (NP (DT the) (NNP DOCTYPE) (NN token) (POS 's)) (NNS force_quirks) (NN flag)) (PP (IN to) (ADVP (RP on))))) (. .) (-RRB- -RRB-))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
(S (VP (VB Emit) (NP (DT the) (NN DOCTYPE) (NN token))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unexpected_null_character) (NN parse) (NN error))) (. .))
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Emit) (NP (DT the) (NN DOCTYPE) (NN token))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Ignore) (NP (DT the) (NN character))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN CDATA_section_bracket_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (JJ eof_in_cdata) (NN parse) (NN error))) (. .))
(S (VP (VB Emit) (NP (DT an) (NN end_of_file) (NN token))) (. .))
[]
(S (VP (VB Emit) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN CDATA_section_end_state)))) (. .))
[]
(S (VP (VB Emit) (NP (DT a) (NNP U+005D) (NN RIGHT) (NNP SQUARE) (NNP BRACKET) (NN character) (NN token))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN CDATA_section_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Emit) (NP (DT a) (NNP U+005D) (NML (NNP RIGHT) (NNP SQUARE) (NNP BRACKET)) (NN character) (NN token))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Data_state)))) (. .))
[]
(S (VP (VB Emit) (NP (CD two) (NNP U+005D) (NN RIGHT) (NNP SQUARE) (NNP BRACKET) (NN character) (NNS tokens))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN CDATA_section_state)))) (. .))
[]
(S (VP (VB Set) (NP (DT the) (JJ temporary) (NN buffer)) (PP (IN to) (NP (DT the) (JJ empty) (NN string)))) (. .))
(S (VP (VB Append) (NP (DT a) (NNP U+0026) (NNP AMPERSAND) (-LRB- -LRB-) (SYM &) (HYPH amp) (-RRB- ;-RRB-) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Named_character_reference_state)))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Numeric_character_reference_state)))) (. .))
[]
(NP (NP (NML (NN Flush) (NN code)) (NNS points)) (VP (VBN consumed) (PP (IN as) (NP (DT a) (NN character) (NN reference)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN return) (NN state)))) (. .))
[0: [34], [36]]
(S (VP (VB Consume) (NP (NP (NP (DT the) (JJ maximum) (NN number)) (PP (IN of) (NP (NNS characters)))) (ADJP (JJ possible))) (, ,) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (VBN consumed) (NNS characters)) (VP (VBP are) (NP (NP (CD one)) (PP (IN of) (NP (NP (DT the) (NNS identifiers)) (PP (IN in) (NP (NP (DT the) (JJ first) (NN column)) (PP (IN of) (NP (DT the) (VBN named) (NN character) (NNS references) (NN table)))))))))))) (. .))
(S (VP (VB Append) (NP (DT each) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer))) (SBAR (WHADVP (WRB when)) (S (NP (PRP it)) (VP (VBZ 's) (VP (VBN consumed)))))) (. .))
[]
(S (SBAR (IN If) (S (S (NP (DT the) (NN character) (NN reference)) (VP (VBD was) (VP (VBN consumed) (PP (IN as) (NP (NP (NN part)) (PP (IN of) (NP (DT an) (NN attribute)))))))) (, ,) (CC and) (S (S (NP (NP (DT the) (JJ last) (NN character)) (VP (VBN matched))) (VP (VBZ is) (RB not) (NP (DT a) (NNP U+003B) (NNP SEMICOLON) (NN character)) (-LRB- -LRB-) (-LRB- ;-RRB-) (-RRB- ,))) (CC and) (S (NP (DT the) (JJ next) (NN input) (NN character)) (VP (VBZ is) (NP (CC either) (NP (NP (DT a) (NNP U+003D) (NNPS EQUALS) (NNP SIGN) (NN character)) (-LRB- -LRB-) (-RRB- =-RRB-)) (CC or) (NP (DT an) (NNP ASCII) (NN alphanumeric)))))))) (, ,) (ADVP (RB then)) (, ,) (PP (IN for) (NP (JJ historical) (NNS reasons))) (, ,) (VP (VP (VB flush) (NP (NP (NN code) (NNS points)) (VP (VBN consumed) (PP (IN as) (NP (DT a) (NN character) (NN reference)))))) (CC and) (VP (VB switch) (PP (IN to) (NP (DT the) (NN return) (NN state))))) (. .))
(NP (LS  ))
(FRAG (ADVP (RB Otherwise)) (: :) (S (SBAR (IN If) (S (NP (NP (DT the) (JJ last) (NN character)) (VP (VBN matched))) (VP (VBZ is) (RB not) (NP (DT a) (NNP U+003B) (NNP SEMICOLON) (NN character))))) (-LRB- -LRB-) (-RRB- ;-RRB-) (-RRB- ,) (ADVP (RB then)) (NP (DT this)) (VP (VBZ is) (NP (DT a) (NN missing_semicolon_after_character_reference) (NN parse) (NN error)))) (. .))
(S (VP (VB Set) (NP (DT the) (JJ temporary) (NN buffer)) (PP (IN to) (NP (DT the) (JJ empty) (NN string)))) (. .))
(S (VP (VB Append) (NP (NP (QP (CD one) (CC or) (CD two)) (NNS characters)) (VP (VBG corresponding) (PP (PP (IN to) (NP (DT the) (NML (NN character) (NN reference)) (NN name))) (-LRB- -LRB-) (SBAR (IN as) (S (VP (VBN given) (PP (IN by) (NP (NP (DT the) (JJ second) (NN column)) (PP (IN of) (NP (DT the) (VBN named) (NML (NN character) (NNS references)) (NN table)))))))) (-RRB- -RRB-)))) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
(NP (NP (NML (NN Flush) (NN code)) (NNS points)) (VP (VBN consumed) (PP (IN as) (NP (DT a) (NN character) (NN reference)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN return) (NN state)))) (. .))
[]
(NP (NP (NML (NN Flush) (NN code)) (NNS points)) (VP (VBN consumed) (PP (IN as) (NP (DT a) (NN character) (NN reference)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Ambiguous_ampersand_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (SBAR (IN If) (S (NP (DT the) (NN character) (NN reference)) (VP (VBD was) (VP (VBN consumed) (PP (IN as) (NP (NP (NN part)) (PP (IN of) (NP (DT an) (NN attribute))))))))) (, ,) (ADVP (RB then)) (VP (VB append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (NP (DT the) (JJ current) (NN attribute) (POS 's)) (NN value)))) (. .))
(S (ADVP (RB Otherwise)) (, ,) (VP (VB emit) (NP (DT the) (JJ current) (JJ input) (NN character)) (PP (IN as) (NP (DT a) (NN character) (NN token)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN unknown_named_character_reference) (NN parse) (NN error))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN return) (NN state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN return) (NN state)))) (. .))
[]
(S (VP (VB Set) (NP (DT the) (NN character) (NN reference) (NN code)) (PP (IN to) (NP (NP (CD zero) (CD -LRB-)) (NN 0) (CD -RRB-)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Hexadecimal_character_reference_start_state)))) (. .))
[]
(S (VP (VB Append) (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN to) (NP (DT the) (JJ temporary) (NN buffer)))) (. .))
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Hexadecimal_character_reference_start_state)))) (. .))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Decimal_character_reference_start_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Hexadecimal_character_reference_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN absence_of_digits_in_numeric_character_reference) (NN parse) (NN error))) (. .))
(NP (NP (NML (NN Flush) (NN code)) (NNS points)) (VP (VBN consumed) (PP (IN as) (NP (DT a) (NN character) (NN reference)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN return) (NN state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Decimal_character_reference_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT an) (NN absence_of_digits_in_numeric_character_reference) (NN parse) (NN error))) (. .))
(NP (NP (NML (NN Flush) (NN code)) (NNS points)) (VP (VBN consumed) (PP (IN as) (NP (DT a) (NN character) (NN reference)))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN return) (NN state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Multiply) (NP (DT the) (NN character) (NN reference) (NN code)) (PP (IN by) (NP (CD 16)))) (. .))
(S (VP (VB Add) (NP (NP (NP (DT a) (JJ numeric) (NN version)) (PP (IN of) (NP (DT the) (JJ current) (NN input) (NN character)))) (-LRB- -LRB-) (S (VP (VB subtract) (NP (CD 0x0030)) (PP (IN from) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-)) (PP (IN to) (NP (DT the) (NN character) (NN reference) (NN code)))) (. .))
[]
(S (VP (VB Multiply) (NP (DT the) (NN character) (NN reference) (NN code)) (PP (IN by) (NP (CD 16)))) (. .))
(S (VP (VB Add) (NP (NP (NP (DT a) (JJ numeric) (NN version)) (PP (IN of) (NP (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (JJ hexadecimal) (NN digit)))))) (PRN (-LRB- -LRB-) (S (VP (VB subtract) (NP (CD 0x0037)) (PP (IN from) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-))) (PP (IN to) (NP (DT the) (NN character) (NN reference) (NN code)))) (. .))
[]
(S (VP (VB Multiply) (NP (DT the) (NN character) (NN reference) (NN code)) (PP (IN by) (NP (CD 16)))) (. .))
(S (VP (VB Add) (NP (NP (NP (DT a) (JJ numeric) (NN version)) (PP (IN of) (NP (NP (DT the) (JJ current) (NN input) (NN character)) (PP (IN as) (NP (DT a) (JJ hexadecimal) (NN digit)))))) (PRN (-LRB- -LRB-) (S (VP (VB subtract) (NP (CD 0x0057)) (PP (IN from) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-))) (PP (IN to) (NP (DT the) (NN character) (NN reference) (NN code)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Numeric_character_reference_end_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_semicolon_after_character_reference) (NN parse) (NN error))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Numeric_character_reference_end_state)))) (. .))
[]
(S (VP (VB Consume) (NP (DT the) (JJ next) (NN input) (NN character))) (: :))
[]
(S (VP (VB Multiply) (NP (DT the) (NN character) (NN reference) (NN code)) (PP (IN by) (NP (CD 10)))) (. .))
(S (VP (VB Add) (NP (NP (NP (DT a) (JJ numeric) (NN version)) (PP (IN of) (NP (DT the) (JJ current) (NN input) (NN character)))) (-LRB- -LRB-) (S (VP (VB subtract) (NP (CD 0x0030)) (PP (IN from) (NP (NP (DT the) (NN character) (POS 's)) (NN code) (NN point))))) (-RRB- -RRB-)) (PP (IN to) (NP (DT the) (NN character) (NN reference) (NN code)))) (. .))
[]
(S (VP (VB Switch) (PP (IN to) (NP (DT the) (NN Numeric_character_reference_end_state)))) (. .))
[]
(S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN missing_semicolon_after_character_reference) (NN parse) (NN error))) (. .))
(S (VP (VB Reconsume) (PP (IN in) (NP (DT the) (NN Numeric_character_reference_end_state)))) (. .))
